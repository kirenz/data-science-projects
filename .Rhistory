# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
# Data overview
df_expl %>% skimr::skim()
df_expl <- df_train
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
# Data overview
df_expl %>% skimr::skim()
corrplot(df_expl)
df_expl %>%
select(-country) %>%
corrplot()
df_expl %>%
select(-country) %>%
corrplot(df_expl)
df_expl %>%
select(-country) %>%
corrplot(df_expl)
cor(df_expl)
df_expl %>%
select(-country) %>%
cor()
corrplot(df_expl[,-country])
df_expl %>%
select(-country) %>%
corrplot()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins=10) +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 5) +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(y=gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x ="", y=gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = "", y = life_satisfaction)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = "", y = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
df_expl %>%
select(-country) %>%
cor()
df_expl %>%
select(-country) %>%
corrplot()
corrplot(df_expl, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
df_expl_2 <- df_expl %>%
select(-country)
corrplot(df_expl_2, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
df_expl %>%
select(-country) %>%
cor.test()
df_expl %>%
select(-country) %>%
cor.test()
df_expl %>%
select(-country) %>%
cor()
cor(df_expl$gdp_per_capita, df_expl$life_satisfaction)
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction)
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "spearman")
cor <-
df_expl %>%
select(-country) %>%
cor()
corrplot(cor)
corrplot(cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
cor <-
df_expl %>%
select(-country) %>%
cor()
cor
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "spearman")
corrplot(cor)
corrplot(cor, type = "upper")
cor.tes(cor)
cor.test(cor)
cor <-
df_expl %>%
select(-country) %>%
cor()
cor
corrplot(cor, type = "upper")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "spearman")
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = "", y = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = "", y = life_satisfaction)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
autoplot(spline_fit, metric = "rmse")
ggplot(df, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
ggplot(df_test, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
X_new <-  tibble(gdp_per_capita = c(50000))
(predict(final_model, new_data = X_new))
ggplot(df, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to use workflows
# Take a look at the data
glimpse(df)
# Change column names
df <- clean_names(df)
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
df_expl <- df_train
# Data overview
df_expl %>% skimr::skim()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = "", y = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = "", y = life_satisfaction)) +
geom_boxplot() +
theme_classic()
cor <-
df_expl %>%
select(-country) %>%
cor()
cor
corrplot(cor, type = "upper")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "spearman")
set.seed(123)
cv_folds <- vfold_cv(df_train, v = 5)
lm_mod <-
linear_reg() %>%
set_engine("lm") %>%
set_mode(mode = "regression")
lm_fit <-
lm_mod %>%
fit_resamples(life_satisfaction ~ gdp_per_capita,
resamples = cv_folds)
# Performance measures for every fold
collect_metrics(lm_fit, summarize = FALSE)
# Average performance accross all folds
collect_metrics(lm_fit, summarize = TRUE)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", se = T) +
theme_classic()
knn_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train)
knn_mod <-
nearest_neighbor(neighbors = tune(),
weight_func = tune()) %>%
set_engine("kknn") %>%
set_mode("regression")
knn_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(knn_rec)
knn_param <-
knn_wflow %>%
parameters() %>%
update(
neighbors = neighbors(c(3, 10)),
weight_func = weight_func(values = c("rectangular",
"inv",
"gaussian",
"triangular"))
)
ctrl <- control_bayes(verbose = TRUE)
set.seed(123)
knn_search <- tune_bayes(knn_wflow,
resamples = cv_folds,
initial = 5,
iter = 4, # usually we would use more iterations
param_info = knn_param,
control = ctrl)
autoplot(knn_search, type = "performance", metric = "rmse")
collect_metrics(knn_search) %>%
dplyr::filter(.metric == "rmse") %>%
arrange(mean)
knn_mod_nest <-
nearest_neighbor(neighbors = 5,
weight_func = "triangular") %>%
set_engine("kknn") %>%
set_mode("regression")
knn_mod_bnest <-
nearest_neighbor(neighbors = 5,
weight_func = "triangular") %>%
set_engine("kknn") %>%
set_mode("regression")
knn_mod_bnest_fit <-
knn_mod_bnest %>%
fit(life_satisfaction ~ gdp_per_capita,
data = df_train)
knn_mod_best_fit <-
knn_mod_bnest %>%
fit(life_satisfaction ~ gdp_per_capita,
data = df_train)
knn_mod_best_fit
knn_mod_best_fit %>%
collect_metrics()
knn_mod_best_fit %>%
tidy()
knn_mod_best_fit
# Chunk 1
/* css code to change the look of the HTML-output */
h1 {
color: #D0313C;
font-size: 200%;
}
h2 {
color: #D0313C;
font-size: 150%;
}
h3 {
font-size: 120%;
font-weight: bold;
}
h4 {
color: rgb(139, 142, 150);
font-size: 100%;
font-weight: bold;
}
# Chunk 2: setup
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Chunk 3
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to use workflows
# Chunk 4
# Load the data from GitHub
LINK = "https://raw.githubusercontent.com/kirenz/datasets/master/oecd_gdp.csv"
df <- read_csv(LINK)
# Chunk 5
# Take a look at the data
glimpse(df)
# Change column names
df <- clean_names(df)
# Chunk 6
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
# Chunk 7
df_expl <- df_train
# Chunk 8
# Data overview
df_expl %>% skimr::skim()
# Chunk 9
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
# Chunk 10
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
# Chunk 11
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
# Chunk 12
ggplot(df_expl, aes(x = "", y = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
# Chunk 13
ggplot(df_expl, aes(x = "", y = life_satisfaction)) +
geom_boxplot() +
theme_classic()
# Chunk 14
cor <-
df_expl %>%
select(-country) %>%
cor()
cor
corrplot(cor, type = "upper")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
# Chunk 15
set.seed(123)
cv_folds <- vfold_cv(df_train, v = 5)
# Chunk 16
lm_mod <-
linear_reg() %>%
set_engine("lm") %>%
set_mode(mode = "regression")
# Chunk 17
lm_fit <-
lm_mod %>%
fit_resamples(life_satisfaction ~ gdp_per_capita,
resamples = cv_folds)
# Chunk 18
# Performance measures for every fold
collect_metrics(lm_fit, summarize = FALSE)
# Average performance accross all folds
collect_metrics(lm_fit, summarize = TRUE)
# Chunk 19
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", se = T) +
theme_classic()
# Chunk 20
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
# Chunk 21
parameters(spline_rec)
# Chunk 22
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree())
# Take a look at the tuning parameter
spline_degree()
# Chunk 23
lm_mod_sp <-
linear_reg() %>%
set_engine("lm")
# Chunk 24
spline_grid <- grid_max_entropy(spline_param,
size = 5)
# Chunk 25
spline_fit <-
tune_grid(lm_mod_sp, # linear regression model
spline_rec,  # our recipe
resamples = cv_folds, # k-fold cross-validation
grid = spline_grid) # grid search with spline parameters
spline_fit
# Chunk 26
show_best(spline_fit, metric = "rmse")
# Chunk 27
spline_fit$.metrics[[1]]
# Chunk 28
estimates <- collect_metrics(spline_fit)
estimates
# Chunk 29
rmse_vals <-
estimates %>%
dplyr::filter(.metric == "rmse") %>%
arrange(mean)
rmse_vals
# Chunk 30
autoplot(spline_fit, metric = "rmse")
# Chunk 31
knn_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train)
# Chunk 32
knn_mod <-
nearest_neighbor(neighbors = tune(),
weight_func = tune()) %>%
set_engine("kknn") %>%
set_mode("regression")
# Chunk 33
knn_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(knn_rec)
# Chunk 34
knn_param <-
knn_wflow %>%
parameters() %>%
update(
neighbors = neighbors(c(3, 10)),
weight_func = weight_func(values = c("rectangular",
"inv",
"gaussian",
"triangular"))
)
# Chunk 35
ctrl <- control_bayes(verbose = TRUE)
set.seed(123)
knn_search <- tune_bayes(knn_wflow,
resamples = cv_folds,
initial = 5,
iter = 4, # usually we would use more iterations
param_info = knn_param,
control = ctrl)
# Chunk 36
autoplot(knn_search, type = "performance", metric = "rmse")
# Chunk 37
collect_metrics(knn_search) %>%
dplyr::filter(.metric == "rmse") %>%
arrange(mean)
# Chunk 38
knn_mod_bnest <-
nearest_neighbor(neighbors = 5,
weight_func = "triangular") %>%
set_engine("kknn") %>%
set_mode("regression")
knn_mod_best_fit <-
knn_mod_bnest %>%
fit(life_satisfaction ~ gdp_per_capita,
data = df_train)
knn_mod_best_fit
plot(knn_mod_best_fit)
ggplot(knn_mod_best_fit$results, aes(x = k, y = RMSE)) +
geom_point() +
geom_line()

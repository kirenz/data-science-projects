knn_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(knn_rec)
# Chunk 36
knn_param <-
knn_wflow %>%
parameters() %>%
update(
neighbors = neighbors(c(3, 10)),
weight_func = weight_func(values = c("rectangular",
"inv",
"gaussian",
"triangular"))
)
# Chunk 37
ctrl <- control_bayes(verbose = TRUE)
set.seed(123)
knn_search <- tune_bayes(knn_wflow,
resamples = cv_folds,
initial = 2,
iter = 4,
param_info = knn_param,
control = ctrl)
# Chunk 38
autoplot(knn_search,
type = "performance",
metric = "rmse")
# Chunk 39
collect_metrics(knn_search) %>%
filter(.metric == "rmse") %>%
arrange(mean)
# Chunk 40
knn_mod_bnest <-
nearest_neighbor(neighbors = 5,
weight_func = "triangular") %>%
set_engine("kknn") %>%
set_mode("regression")
knn_mod_best_fit <-
knn_mod_bnest %>%
fit(life_satisfaction ~ gdp_per_capita,
data = df_train)
knn_mod_best_fit
# Chunk 41
spline_rec_last <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = 3)
# Chunk 42
spline_final <- last_fit(lm_mod_sp,
spline_rec_last,
split = df_split)
# Chunk 43
collect_metrics(spline_final)
# Chunk 44
spline_final$.predictions
# Chunk 45
spline_wflow_last <-
workflow() %>%
add_recipe(spline_rec_last) %>%
add_model(lm_mod_sp)
# Chunk 46
spline_res <-
last_fit(spline_wflow_last,
split = df_split)
# Chunk 47
spline_res$.metrics[[1]]
# Chunk 48
spline_res$.workflow
# Chunk 49
spline_res$.predictions
# Chunk 50
spline_res %>% collect_predictions()
# Chunk 51
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
# Chunk 52
final_model <- fit(spline_wflow_last, df)
# Chunk 53
final_model
# Chunk 54
ggplot(df, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::bs(x, 3), se = F) +
theme_classic()
# Chunk 55
model <- extract_model(final_model)
# Chunk 56
X_new <-  tibble(gdp_per_capita = c(50000))
(predict(final_model, new_data = X_new))
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to create workflows
# Create the link
LINK = "https://raw.githubusercontent.com/kirenz/datasets/master/oecd_gdp.csv"
# Import data
df <- read_csv(LINK)
# Take a look at the data
glimpse(df)
# Change column names
df <- clean_names(df)
glimpse(df)
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
df_expl <- df_train
# Data overview
df_expl %>% skim()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
set.seed(123)
cv_folds <- vfold_cv(df_train, v = 5)
lm_mod <-
linear_reg() %>%
set_engine("lm") %>%
set_mode(mode = "regression")
lm_fit <-
lm_mod %>%
fit_resamples(life_satisfaction ~ gdp_per_capita,
resamples = cv_folds)
# Performance measures for every fold
collect_metrics(lm_fit, summarize = FALSE)
# Average performance accross all folds
collect_metrics(lm_fit, summarize = TRUE)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_classic()
lm_mod_sp <-
linear_reg() %>%
set_engine("lm")
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
parameters(spline_rec)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree())
# Take a look at the tuning parameter
spline_degree()
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to create workflows
# Create the link
LINK = "https://raw.githubusercontent.com/kirenz/datasets/master/oecd_gdp.csv"
# Import data
df <- read_csv(LINK)
# Take a look at the data
glimpse(df)
# Change column names
df <- clean_names(df)
glimpse(df)
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
df_expl <- df_train
# Data overview
df_expl %>% skim()
ggplot(df_expl, aes(x = gdp_per_capita,
y = life_satisfaction)) +
geom_point() +
theme_classic()
ggplot(df_expl, aes(x = gdp_per_capita)) +
geom_histogram(bins = 15) +
geom_density() +
theme_classic()
ggplot(df_expl, aes(x = life_satisfaction)) +
geom_histogram(bins = 15) +
theme_classic()
ggplot(df_expl, aes(x = "", y = gdp_per_capita)) +
geom_boxplot() +
theme_classic()
ggplot(df_expl, aes(x = "", y = life_satisfaction)) +
geom_boxplot() +
theme_classic()
cor <-
df_expl %>%
select(-country) %>%
cor()
cor
corrplot(cor, type = "upper")
cor.test(df_expl$gdp_per_capita, df_expl$life_satisfaction,
method = "pearson")
set.seed(123)
cv_folds <- vfold_cv(df_train, v = 5)
lm_mod <-
linear_reg() %>%
set_engine("lm") %>%
set_mode(mode = "regression")
lm_fit <-
lm_mod %>%
fit_resamples(life_satisfaction ~ gdp_per_capita,
resamples = cv_folds)
# Performance measures for every fold
collect_metrics(lm_fit, summarize = FALSE)
# Average performance accross all folds
collect_metrics(lm_fit, summarize = TRUE)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_classic()
lm_mod_sp <-
linear_reg() %>%
set_engine("lm")
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
spline_rec
parameters(spline_rec)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune())
parameters(spline_rec)
parameters(spline_rec)
spline_rec
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
parameters(spline_rec)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree())
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree())
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
parameters(spline_rec)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
spline_prep <- prep(spline_rec)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune("gdp_per_capita"))
spline_rec
parameters(spline_rec)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune()
)
parameters(spline_rec)
View(df)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita,
deg_free = tune()
)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
parameters(spline_rec)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita,
data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
parameters(spline_rec)
library(dials)
parameters(spline_rec)
dials::parameters(spline_rec)
df_train
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita, data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
spline_rec
parameters(spline_rec)
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to create workflows
spline_fit <-
tune_grid(lm_mod_sp, # linear regression model
spline_rec,  # our recipe
resamples = cv_folds, # k-fold cross-validation
grid = spline_grid) # grid search with spline parameters
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
View(df)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita, data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
parameters(spline_rec)
library("devtools")
install_github("tidymodels/tidymodels")
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to create workflows
install.pakcages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
# Load packages
library(tidyverse) # collection of important data science packages
library(tidymodels)  # collection of packages for modeling and ml
library(janitor) # data preparation package
library(kknn) # K-nearest neighbor model
library(skimr) # to obtain tidy data summaries
library(corrplot) # to study corrleations
library(workflows) # to create workflows
# Create the link
LINK = "https://raw.githubusercontent.com/kirenz/datasets/master/oecd_gdp.csv"
# Import data
df <- read_csv(LINK)
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita, data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
# Take a look at the data
glimpse(df)
# Change column names
df <- clean_names(df)
glimpse(df)
set.seed(123)
df_split <- initial_split(df)
df_train <- training(df_split)
df_test <- testing(df_split)
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita, data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune())
parameters(spline_rec)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
# Take a look at the tuning parameter
spline_degree()
spline_rec <-
recipe(life_satisfaction ~ gdp_per_capita, data = df_train) %>%
step_ns(gdp_per_capita, deg_free = tune("gdp_per_capita"))
parameters(spline_rec)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_param <-
spline_rec %>%
parameters() %>%
update(gdp_per_capita = spline_degree("gdp_per_capita"))
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_grid <- grid_max_entropy(spline_rec,
size = 5)
spline_param <-
spline_rec %>%
parameters() %>%
update(
gdp_per_capita = spline_degree()
)
# Take a look at the tuning parameter
spline_degree()
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_fit <-
tune_grid(lm_mod_sp, # linear regression model
spline_rec,  # our recipe
resamples = cv_folds, # k-fold cross-validation
grid = spline_grid) # grid search with spline parameters
lm_mod_sp <-
linear_reg() %>%
set_engine("lm")
spline_param <-
spline_rec %>%
parameters() %>%
update(
gdp_per_capita = spline_degree()
)
# Take a look at the tuning parameter
spline_degree()
spline_grid <- grid_max_entropy(spline_param,
size = 5)
spline_fit <-
tune_grid(lm_mod_sp, # linear regression model
spline_rec,  # our recipe
resamples = cv_folds, # k-fold cross-validation
grid = spline_grid) # grid search with spline parameters
set.seed(123)
cv_folds <- vfold_cv(df_train, v = 5)
spline_fit <-
tune_grid(lm_mod_sp, # linear regression model
spline_rec,  # our recipe
resamples = cv_folds, # k-fold cross-validation
grid = spline_grid) # grid search with spline parameters
show_best(spline_fit, metric = "rmse")
spline_fit$.metrics[[1]]
estimates <- collect_metrics(spline_fit)
estimates
rmse_vals <-
estimates %>%
dplyr::filter(.metric == "rmse") %>%
arrange(mean)
rmse_vals
autoplot(spline_fit, metric = "rmse")
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ ns(x, df = 3)) +
theme_classic()
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = life_satisfaction ~ ns(gdp_per_capita, 3)) +
theme_classic()
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = life_satisfaction ~ ns(gdp_per_capita, 3), se = FALSE) +
theme_classic()
df_train
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ ns(x, 3), se = FALSE) +
theme_classic()
library(splines)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ ns(x, 3), se = FALSE) +
theme_classic()
autoplot(spline_fit, metric = "rmse")
library(splines)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ ns(x, 3), se = FALSE) +
theme_classic()
final_model <- fit(spline_wflow_last, df)
ggplot(df_train, aes(gdp_per_capita, life_satisfaction)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ splines::ns(x, 3), se = F) +
theme_classic()
